/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import { useState } from "react";
import { Roles, User } from "@/utils/types";
import { MINECRAFT_IMAGE } from "@/utils/constants";
import PlayerCard from "@/components/player-card";
import Spinner from "@/components/spinner";
import { fetchMineCraftUser } from "@/api/services";
import { AxiosError } from "axios";


const Home = () => {
  const [username, setUserName] = useState("");
  const [errorMsg, setErrorMsg] = useState("");
  const [data, setData] = useState<User[]>([]);
  const [loading, setLoading] = useState(false)
  const addUser = (user: User) => {
    const prevUsers = data || [];

    setData([...prevUsers, user]);
  };

  const deleteUser = (id: string) => {
    setData(data.filter((d) => d.id !== id));
  };

  const toggleRole = (id: string) => {
    const prevUsers = [...data];
    const userObject = prevUsers.find((d) => d.id === id);
    if (userObject) {
      const isAdmin =
        prevUsers[prevUsers.indexOf(userObject)].role == Roles.ADMIN;
      prevUsers[prevUsers.indexOf(userObject)].role = isAdmin
        ? Roles.PLAYER
        : Roles.ADMIN;
      setData(prevUsers);
    }
  };

  const onSubmit = async () => {
    setErrorMsg("");
    if (!username) return setErrorMsg("Please write username.");
    setLoading(true)
    try {
      const d = await fetchMineCraftUser(username)

      const alreadyExists = data.find((u) => u.id === d.id);
      if (alreadyExists)
        return setErrorMsg(
          "User already exists! Please try another username."
        );
      addUser({
        id: d.id as string,
        name: username,
        role: Roles.PLAYER,
        image: `${MINECRAFT_IMAGE}/${d.id}`,
      });
      setUserName("");
    } catch (e: any) {
      const errorMsg = e instanceof AxiosError ? e.response?.data?.errorMessage : e.errorMessage;
      if (errorMsg) setErrorMsg(errorMsg);
    } finally {
      setLoading(false)

    }
  };


  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      onSubmit();
    }
  };

  return (
    <>
      <Head>
        <title>Minecraft user list</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-1 sm:p-2 md:p-24">
        <div className="w-full">
          <div className="flex row">
            <input
              className="p-3 w-full"
              placeholder="Write minecraft username"
              value={username}
              onChange={(e) => setUserName(e.target.value)}
              onKeyDown={handleKeyPress}
            />
            <button
              type="button"
              disabled={loading}
              onClick={onSubmit}
              className="px-5 bg-white text-black hover:bg-gray-400 active:bg-gray-700 active:text-white flex row items-center justify-center"
            >
              {loading && <Spinner />}
              ADD
            </button>
          </div>
          {errorMsg && <p className="text-red-500 mt-2">{errorMsg}</p>}

          <div className="mt-10">
            {data.map((d) => (
              <PlayerCard key={d.id} data={d} toggleRole={toggleRole} deleteUser={deleteUser} />
            ))}
          </div>

          {!loading && !data?.length && <div className="mt-20">
            <p className="text-center uppercase"> You&apos;ve not added any players yet, add one and get started!</p>
            <p className="text-center text-sm text-gray-300 mt-4">Write username in the textbox above and click on add button</p>
          </div>}
        </div>
      </main>
    </>
  );
};

export default Home;
